// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mandelbrot
Rcpp::List mandelbrot(unsigned dim, unsigned maxIter, long double R, long double cx, long double cy, double exponent, double escape);
RcppExport SEXP _fractalr_mandelbrot(SEXP dimSEXP, SEXP maxIterSEXP, SEXP RSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP exponentSEXP, SEXP escapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< long double >::type R(RSEXP);
    Rcpp::traits::input_parameter< long double >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< long double >::type cy(cySEXP);
    Rcpp::traits::input_parameter< double >::type exponent(exponentSEXP);
    Rcpp::traits::input_parameter< double >::type escape(escapeSEXP);
    rcpp_result_gen = Rcpp::wrap(mandelbrot(dim, maxIter, R, cx, cy, exponent, escape));
    return rcpp_result_gen;
END_RCPP
}
// julia
Rcpp::List julia(std::complex<double> c, unsigned dim, unsigned maxIter, long double R, long double cx, long double cy, long double exponent, double escape);
RcppExport SEXP _fractalr_julia(SEXP cSEXP, SEXP dimSEXP, SEXP maxIterSEXP, SEXP RSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP exponentSEXP, SEXP escapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type c(cSEXP);
    Rcpp::traits::input_parameter< unsigned >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< long double >::type R(RSEXP);
    Rcpp::traits::input_parameter< long double >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< long double >::type cy(cySEXP);
    Rcpp::traits::input_parameter< long double >::type exponent(exponentSEXP);
    Rcpp::traits::input_parameter< double >::type escape(escapeSEXP);
    rcpp_result_gen = Rcpp::wrap(julia(c, dim, maxIter, R, cx, cy, exponent, escape));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fractalr_mandelbrot", (DL_FUNC) &_fractalr_mandelbrot, 7},
    {"_fractalr_julia", (DL_FUNC) &_fractalr_julia, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_fractalr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
